const Cc = Components.classes;
const Ci = Components.interfaces;

Components.utils.import("resource://gre/modules/Services.jsm");
Components.utils.import("resource://gre/modules/XPCOMUtils.jsm");

var tweetinsta = {
	//firstRunURL:'http://barisderin.com/?p=1705',
	//updateURL:'http://barisderin.com/?p=1707',
	addonGUID:'tweet-insta@prakhar.com',
	prefInstance:Components.classes["@mozilla.org/preferences-service;1"].getService(Components.interfaces.nsIPrefBranch),		
	THUNDERBIRD_ID: "{3550f703-e582-4d05-9a08-453d09bdfdc6}",
	FIREFOX_ID: "{ec8030f7-c20a-464f-9b0e-13a3a9e97384}",
	SEAMONKEY_ID:"{92650c4d-4b8e-4d2a-b7eb-24ecf4f6b63a}",	
	appInfo: Components.classes["@mozilla.org/xre/app-info;1"].getService(Components.interfaces.nsIXULAppInfo),	
	addonLiteralName:"tweet-insta",
	enableTwitterShareButton:function(event){
		if(event.button==1||event.button==2) return;		
	},		
	getPrefValue:function(pref){
		var type=tweetinsta.prefInstance.getPrefType(pref);
		if(type==32) return tweetinsta.prefInstance.getCharPref(pref);
		else if(type==128) return tweetinsta.prefInstance.getBoolPref(pref);
		else if(type==64) return tweetinsta.prefInstance.getIntPref(pref);
	},
	setPrefValue:function(pref,value){
		var type=tweetinsta.prefInstance.getPrefType(pref);
		if(type==32) tweetinsta.prefInstance.setCharPref(pref,value);
		else if(type==128) tweetinsta.prefInstance.setBoolPref(pref,value);
		else if(type==64) tweetinsta.prefInstance.setIntPref(pref,value);
	},
	createAlertPrompt:function(promptString){
		var prompt = Components.classes["@mozilla.org/embedcomp/prompt-service;1"].getService(Components.interfaces.nsIPromptService);
		prompt.alert(null, tweetinsta.addonLiteralName,promptString);		
	},
	createPromptPrompt:function(promptString){
		var prompt = Components.classes["@mozilla.org/embedcomp/prompt-service;1"].getService(Components.interfaces.nsIPromptService);
		var input = {value:""}; 
		var check = {value:false};
		var result= prompt.prompt(null,tweetinsta.addonLiteralName,promptString,input,null,check);
		if(result==false) return null;
		else return input.value;
	},
	createConfirmPrompt:function(promptString){
		var prompt = Components.classes["@mozilla.org/embedcomp/prompt-service;1"].getService(Components.interfaces.nsIPromptService);			
		return prompt.confirm(null, tweetinsta.addonLiteralName,promptString);
	},
	reg:function(){
		return (/^http:\/\/github/bearcave9)
	},
	mainWindowLoadHandler:function(window){
		//tweetinsta.checkFlashBlock();	
		tweetinsta.UIBuilder.setupUI(window);
		//tweetinsta.instalandupdatecheck(window);
		window.setTimeout(function(){tweetinsta.instalandupdatecheck(window);},2000);
		//tweetinsta.requestAppendToolbar();//?????????
		//tweetinsta.addAddonListener();//?????????
		//tweetinsta.hideAddonBarIcon();//?????????
		//window.getBrowser().addEventListener("DOMContentLoaded",tweetinsta.aboutblanklistener,true);
		//tweetinsta.STRINGS=document.getElementById("tweetinsta-strings");//remove it eventually	

		//if(typeof window.gMultiProcessBrowser !== "undefined" && window.gMultiProcessBrowser) tweetinsta.loadFrameScript(window);//?????????			
		/*window.setTimeout(function(){
			if(typeof window.gMultiProcessBrowser !== "undefined" && window.gMultiProcessBrowser) tweetinsta.loadFrameScript(window);
		},50);*/
	},
	mainWindowUnloadHandler:function(window){
		tweetinsta.UIBuilder.tearDownUI(window);
		//window.getBrowser().removeEventListener("DOMContentLoaded",tweetinsta.aboutblanklistener,true);
		//if(typeof window.gMultiProcessBrowser !== "undefined" && window.gMultiProcessBrowser) tweetinsta.unloadFrameScript(window);//?????????
	},	
	UIBuilder:{
		widgetCreated:false,
		setupUI:function(window){
			try{tweetinsta.UIBuilder.addToolbarButton(window);}catch(e){tweetinstaBootstrapAddon.lg(e,1);}
			try{tweetinsta.UIBuilder.addToolsMenu(window);}catch(e){tweetinstaBootstrapAddon.lg(e,1);}			
		},
		tearDownUI:function(window){
			try{tweetinsta.UIBuilder.removeToolbarButton(window);}catch(e){tweetinstaBootstrapAddon.lg(e,1);}
			try{tweetinsta.UIBuilder.removeToolsMenu(window);}catch(e){tweetinstaBootstrapAddon.lg(e,1);}
		},
		createToolbarButton:function(document){
			var toolbarbutton = document.createElement("toolbarbutton");
			toolbarbutton.setAttribute("id", "tweetinsta-toolbarbutton");
			toolbarbutton.setAttribute("label", "tweet-insta");
			toolbarbutton.setAttribute("tooltiptext", "tweet-insta");
			toolbarbutton.setAttribute("class", (tweetinsta.appInfo.ID!=tweetinsta.SEAMONKEY_ID) ? "toolbarbutton-1" : "toolbarbutton-1 seamonkey");
			toolbarbutton.setAttribute("type", "button");
			toolbarbutton.addEventListener("command",function(event){tweetinsta.openFacebookWindow(event)},true);				
			return toolbarbutton;		
		},
		addToolbarButton:function(window){
			var document=window.document;
			if (window.CustomizableUI) {
				if(!tweetinsta.UIBuilder.widgetCreated){
					window.CustomizableUI.createWidget({
						type: 'custom',
						defaultArea: window.CustomizableUI.AREA_NAVBAR,
						id:"tweetinsta-toolbarbutton",
						onBuild:function(aDocument){
							return tweetinsta.UIBuilder.createToolbarButton(aDocument);
						}
					});
				}
				tweetinsta.UIBuilder.widgetCreated=true;
				if(!tweetinsta.getPrefValue("extensions.tweetinsta.tbplaced")) tweetinsta.UIBuilder.placeToolbarButton(window);
			}
			else{
				var toolbarbutton=tweetinsta.UIBuilder.createToolbarButton(document);
				(document.getElementById("navigator-toolbox") || document.getElementById("mail-toolbox")).palette.appendChild(toolbarbutton);
				//tweetinsta.UIBuilder.placeToolbarButton(window,toolbarbutton);
				if(tweetinsta.appInfo.ID!="{8de7fcbb-c55c-4fbe-bfc5-fc555c87dbc4}") tweetinsta.UIBuilder.placeToolbarButton(window,toolbarbutton);
				else{
					window.setTimeout(function(){
						tweetinsta.UIBuilder.placeToolbarButton(window,toolbarbutton);
					},1000)					
				}				
			}
			window.addEventListener("aftercustomization", tweetinsta.UIBuilder.afterCustomization, false);				
		},
		removeToolbarButton:function(window){
			if (window.CustomizableUI) {
				window.CustomizableUI.destroyWidget("tweetinsta-toolbarbutton");
			}
			else{
				var document = window.document;
				var buttonId="tweetinsta-toolbarbutton";
				var button=document.getElementById(buttonId);
				button.parentNode.removeChild(button);
			}
			window.removeEventListener("aftercustomization", tweetinsta.UIBuilder.afterCustomization, false);
		},
		placeToolbarButton:function(window,toolbarbutton){
			if(!tweetinsta.getPrefValue("extensions.tweetinsta.tbinsert")) return;
			var document=window.document;
			if (window.CustomizableUI) {
				window.CustomizableUI.addWidgetToArea("tweetinsta-toolbarbutton", window.CustomizableUI.AREA_NAVBAR,5);
				tweetinsta.setPrefValue("extensions.tweetinsta.tbplaced",true);
			}
			else{
				var toolbar = document.querySelector("[currentset^='" + toolbarbutton.id + ",'],[currentset*='," + toolbarbutton.id +
				",'],[currentset$='," + toolbarbutton.id + "']");
				if(toolbar){
					var currentset=toolbar.getAttribute("currentset").split(",");
					var i=currentset.indexOf(toolbarbutton.id) + 1;
					var before=null;
					while (i < currentset.length && !(before=document.getElementById(currentset[i]))) i++;
					toolbar.insertItem(toolbarbutton.id, before, null, false);	
				}
				else{		
					var navbar = (document.getElementById("nav-bar") || document.getElementById("mail-bar3"));
					navbar.insertItem(toolbarbutton.id, null, null, false);			
				}
				if(!document.getElementById(toolbarbutton.id)) (toolbar || navbar).insertItem(toolbarbutton.id, null, null, false);				
			}
		},
		afterCustomization:function(event){
			var window=event.currentTarget;
			var document=window.document;
			var ythdprefsinstance = Components.classes["@mozilla.org/preferences-service;1"].getService(Components.interfaces.nsIPrefBranch);
			if(!document.getElementById("tweetinsta-toolbarbutton") || document.getElementById("tweetinsta-toolbarbutton").parentNode.id=="BrowserToolbarPalette") ythdprefsinstance.setBoolPref("extensions.tweetinsta.tbinsert",false);
			else ythdprefsinstance.setBoolPref("extensions.tweetinsta.tbinsert",true);
		},
		addToolsMenu:function(window){
			var document=window.document;
			var toolsmenumi = document.createElement("menuitem");
			toolsmenumi.setAttribute("id", "tweetinsta-tools-menuitem");
			toolsmenumi.setAttribute("label", "tweet-insta");
			toolsmenumi.setAttribute("class", "menuitem-iconic");
			toolsmenumi.setAttribute("accesskey", "f");
			toolsmenumi.addEventListener("command",function(event){tweetinsta.openFacebookWindow(event)},true);
			(document.getElementById("menu_ToolsPopup") || document.getElementById("taskPopup")).appendChild(toolsmenumi);		
		},
		removeToolsMenu:function(window){
			var document=window.document;
			document.getElementById("tweetinsta-tools-menuitem").parentNode.removeChild(document.getElementById("tweetinsta-tools-menuitem"));
		}		
	},	
	instalandupdatecheck:function(window){
		var mostRecentWindow=Components.classes['@mozilla.org/appshell/window-mediator;1'].getService(Components.interfaces.nsIWindowMediator).getMostRecentWindow("navigator:browser");
		if(window!=mostRecentWindow) return;
		var getBrowser=window.getBrowser;
		if(tweetinsta.getPrefValue("extensions.tweetinsta.reinstall")){
			//getBrowser().addEventListener('DOMContentLoaded', tweetinsta.addonReinstall, true);
			tweetinsta.addonReinstall(window);
			return;
		}
		Components.utils.import("resource://gre/modules/AddonManager.jsm");  
		AddonManager.getAddonByID(tweetinsta.addonGUID, function(addon) {  
			var tweetinstaprefsinstance = Components.classes["@mozilla.org/preferences-service;1"].getService(Components.interfaces.nsIPrefBranch);
			var tweetinstaversion = tweetinstaprefsinstance.getCharPref("extensions.tweetinsta.currentversion");
			var tweetinstanewversion = addon.version;
			if (tweetinstaversion != tweetinstanewversion) {
				//getBrowser().addEventListener('DOMContentLoaded', tweetinsta.tweetinstaFirstRun, true);
				tweetinsta.tweetinstaFirstRun(window);
			}
		});
	},
	addonReinstall:function(window){
		//var window=event.currentTarget.ownerDocument.defaultView;
		var document=window.document;
		var getBrowser=window.getBrowser;
		//getBrowser().removeEventListener('DOMContentLoaded', tweetinsta.addonReinstall, true);
		var tweetinstaUrl;
		tweetinstaUrl=tweetinsta.firstRunURL;
		//getBrowser().selectedTab = getBrowser().addTab(tweetinstaUrl,{relatedToCurrent: true});
		tweetinsta.openURLInTab(window,tweetinstaUrl);
		tweetinsta.setPrefValue("extensions.tweetinsta.reinstall",false);			
	},
	tweetinstaFirstRun:function(window){
		//var window=event.currentTarget.ownerDocument.defaultView;
		var document=window.document;
		var getBrowser=window.getBrowser;	
		//getBrowser().removeEventListener('DOMContentLoaded', tweetinsta.tweetinstaFirstRun, true);
		var tweetinstainstalled = tweetinsta.getPrefValue("extensions.tweetinsta.currentversion") != "0";
		var tweetinstaUrl;
		if (!tweetinstainstalled) {
			tweetinstaUrl=tweetinsta.firstRunURL;
			//getBrowser().selectedTab = getBrowser().addTab(tweetinstaUrl,{relatedToCurrent: true});
			tweetinsta.openURLInTab(window,tweetinstaUrl);
		}
		else {
			tweetinstaUrl=tweetinsta.updateURL;
			//getBrowser().selectedTab = getBrowser().addTab(tweetinstaUrl,{relatedToCurrent: true});
			tweetinsta.openURLInTab(window,tweetinstaUrl);		
		}
		Components.utils.import("resource://gre/modules/AddonManager.jsm");  
		AddonManager.getAddonByID(tweetinsta.addonGUID, function(addon) {  
			var tweetinstaprefsinstance = Components.classes["@mozilla.org/preferences-service;1"].getService(Components.interfaces.nsIPrefBranch);
			var tweetinstaversion = tweetinstaprefsinstance.getCharPref("extensions.tweetinsta.currentversion");
			var tweetinstanewversion = addon.version;
			if (tweetinstaversion != tweetinstanewversion) {
				tweetinstaprefsinstance.setCharPref("extensions.tweetinsta.currentversion", tweetinstanewversion);
			}
		});
	},
	openURLInTab:function(window,url,prinstallrequested) {
		switch (tweetinsta.appInfo.ID) {
			case tweetinsta.THUNDERBIRD_ID:
				// Thunderbird's "openTab" implementation for the "contentTab" mode
				// automatically switches to an existing tab containing the URL we are
				// opening, so we don't have to check for one here.
				Components.classes['@mozilla.org/appshell/window-mediator;1'].
				getService(Components.interfaces.nsIWindowMediator).
				getMostRecentWindow("mail:3pane").
				document.getElementById("tabmail").
				openTab("contentTab", {contentPage: url, clickHandler: ("specialTabs.siteClickHandler(event,tweetinsta.reg());")});	
				break;
			case tweetinsta.FIREFOX_ID:
			default: {
				//window.openUILinkIn(url, "tab");
				var getBrowser=window.getBrowser;
				getBrowser().selectedTab = getBrowser().addTab(url,{relatedToCurrent: true});
				//window.focus();
			}
		}
	},
	aboutblanklistener:function(event){	
		if (Object.prototype.toString.call(event.originalTarget == "[object HTMLDocument]")) {
			var doc = event.originalTarget;

			try {
				var domain=doc.domain;
			} catch (err) {
				return;
			}
			if (!domain) {
				return;
			}
	
			if(tweetinsta.getPrefValue("extensions.tweetinsta.enableembeddedvideo")){
				if (domain && domain=="www.youtube.com") {
					if(doc.location.pathname.search(/^\/embed\//)==0){
						if(event.originalTarget.defaultView.frameElement){
							tweetinsta.handleYTIframe(doc,[event.originalTarget.defaultView.frameElement]);
							return;
						}
						else{
							var vquality=tweetinsta.getVideoQuality();
							if(doc.location.href.search(new RegExp("vq="+vquality))!=-1) return;
							doc.location.href = tweetinsta.changeURIParameter(doc.location.href,"vq",vquality);
							return;								
						}
					}
				}
				else if(domain && domain!="www.youtube.com"){
					tweetinsta.handleYTIframe(doc);		
				}
			}
			
			if (event.originalTarget.defaultView.frameElement) {
				while (doc.defaultView.frameElement) {
					return;
				}
			}
			
			tweetinsta.changeVideoQuality(doc,true)
		}
	},
	openFacebookWindow:function(event){
		var document=event.currentTarget.ownerDocument;
		var window=document.defaultView;	
		var screen=window.screen;	
		var width=626;
		var height=436;
		var left = (screen.width/2)-(width/2);
		var top = (screen.height/2)-(height/2);		  
		window.open("http://www.facebook.com/sharer/sharer.php?u="+encodeURIComponent(window.content.location.href),'name','height='+height+',width='+width+', resizable=1,scrollbars=1,menubar=0,toolbar=0,location=0,status=0,statusbar=0'+',top='+top+',left='+left)		  
	},	
	handleStatusClick: function(event) {
		if (event.target.id == "tweetinsta-statusbar") {
			if (event.button == 0 || event.button == 1 || event.button == 2) {
				document.getElementById(document.getElementById('tweetinsta-statusbar').getAttribute("popupid")).openPopup(event.target,"before_start", -1, -1);
			} 
		}
	},
	addAddonListener:function(){
		var beingUninstalled;  
		let listener = {  
		  onInstalling: function(addon) {  
			if (addon.id == tweetinsta.addonGUID) {  
			  beingUninstalled = true;  
			  if(tweetinsta.getPrefValue("extensions.tweetinsta.currentversion")==addon.version) 			      tweetinsta.setPrefValue("extensions.tweetinsta.reinstall",true);
			}  
		  },  
		  onUninstalling: function(addon) {  
			if (addon.id == tweetinsta.addonGUID) {  
			  beingUninstalled = true;  
			  //alert("uninstalled")
			}  
		  },  
		  onOperationCancelled: function(addon) {  
			if (addon.id == tweetinsta.addonGUID) {  
			  beingUninstalled = (addon.pendingOperations & AddonManager.PENDING_UNINSTALL) != 0;  
			  // alert("canceled")
			}  
		  }  
		}  
		try {  
		  Components.utils.import("resource://gre/modules/AddonManager.jsm");  
		  AddonManager.addAddonListener(listener);  
		} catch(ex){} 
	},
	menuHideShow:function(event){
		document.getElementById("tweetinsta-normalcontext-searchoneksi").hidden = !gContextMenu.isTextSelected && !(gContextMenu.onTextInput && gContextMenu.target.selectionStart < gContextMenu.target.selectionEnd);
	},		
	openFacebook:function(){
		tweetinsta.openURLInTab(tweetinsta.openTabURI);
	},		
	openTabURI:'http://facebook.com/',
	requestAppendToolbar:function(){
	
		var tweetinstaprefsinstance = Components.classes['@mozilla.org/preferences-service;1'].getService(Components.interfaces.nsIPrefBranch);
		var tweetinstatbadded = tweetinstaprefsinstance.getBoolPref("extensions.tweetinsta.tbadded");
		if(!tweetinstatbadded) {
			tweetinsta.appendToToolbar(); 
			tweetinstaprefsinstance.setBoolPref("extensions.tweetinsta.tbadded",true);
		}
	
	},		
	appendToToolbar: function() {
		if (!window.CustomizableUI) {	
			// Get the current navigation bar button set (a string of button IDs) and append
			// ID of the Firebug start button into it.
			var startButtonId =  "tweetinsta-toolbarbutton";
			var navBarId = "nav-bar";
			var navBar = document.getElementById(navBarId);
			var currentSet = navBar.currentSet;
	
			// Append only if the button is not already there.
			var curSet = currentSet.split(",");
			if (curSet.indexOf(startButtonId) == -1)
			{
				navBar.insertItem(startButtonId);
				navBar.setAttribute("currentset", navBar.currentSet);
				document.persist("nav-bar", "currentset");
	
				try
				{
					// The current global scope is not browser.xul.
					top.BrowserToolboxCustomizeDone(true);
				}
				catch (e)
				{
	   
				}
				
			}
	
			// Don't forget to show the navigation bar - just in case it's hidden.
			// Dom.collapse(navBar, false);
			//document.persist(navBarId, "collapsed");
		}
		else {
			var ids=["tweetinsta-toolbarbutton"];
			var add=1;
			for (var i=0;i<ids.length;i++) {
				if(add){
					if(!window.CustomizableUI.getPlacementOfWidget(ids[i])){
						window.CustomizableUI.addWidgetToArea(ids[i], CustomizableUI.AREA_NAVBAR);
					}
				}
				else{
					window.CustomizableUI.removeWidgetFromArea(ids[i]);                      
				}
			}
		}	        
	},	  
	handleMenuCommands:function(event){
		if(event.target==event.currentTarget) tweetinsta.openFacebook();
		if(event.target.id=="tweetinsta-toolbarbutton-popup-facebook-home")  tweetinsta.openFacebook();
		if(event.target.id=="tweetinsta-toolbarbutton-popup-my-messages")  tweetinsta.openURL("http://facebook.com/messages/");			
	  },
	openURL:function(url){
		gBrowser.selectedTab=gBrowser.addTab(url,{relatedToCurrent: true});
	}	  		      		
}
	
var WindowListener = {
	setupBrowserUI: function(window,closebar) {
		// Take any steps to add UI or anything to the browser window
		// document.getElementById() etc. will work here 
		try{
			tweetinsta.mainWindowLoadHandler(window);
		} catch(e){
			tweetinstaBootstrapAddon.lg(e,1);
		}		
	},
	tearDownBrowserUI: function(window) {
		// Take any steps to remove UI or anything from the browser window
		// document.getElementById() etc. will work here
		tweetinsta.mainWindowUnloadHandler(window);
	},
	// nsIWindowMediatorListener functions
	onOpenWindow: function(xulWindow) {
		// A new window has opened
		var domWindow = xulWindow.QueryInterface(Components.interfaces.nsIInterfaceRequestor)
								 .getInterface(Components.interfaces.nsIDOMWindow);
		// Wait for it to finish loading
		domWindow.addEventListener("load", function listener() {
			domWindow.removeEventListener("load", listener, false);
			// If this is a browser window then setup its UI	  
			if (domWindow.document.documentElement.getAttribute("windowtype") == "navigator:browser") WindowListener.setupBrowserUI(domWindow);
		}, false);
	},
	onCloseWindow: function(xulWindow) {
	},
	onWindowTitleChange: function(xulWindow, newTitle) {
	}
};

var tweetinstaBootstrapAddon = {
	prefsinstance:Components.classes["@mozilla.org/preferences-service;1"].getService(Components.interfaces.nsIPrefBranch),
	startup:function(data,reason){
		this.requestAddPrerequisites(data);
		//this.registerComponent();
		this.setDefaultPrefs();
		this.addAddonListener();
		//this.setDefaultLocalizations();
		this.setupBrowserUI();
		this.addWindowListener();
		this.addAddonSkinCSS();
		//this.requestAddFullPageCSS();
		//this.requestRegisterObservers();
		//this.requestRegisterPrefObserver();	
	},
	shutdown:function(data,reason){
		// When the application is shutting down we normally don't have to clean
		// up any UI changes made
		if (reason == APP_SHUTDOWN) return;
		this.removeAddonListener();
		//this.removeDefaultLocalizations();
		this.tearBrowserUI();
		this.removeWindowListener();
		this.removeAddonSkinCSS();
		//this.removeFullPageCSS();		
		//this.requestUnregisterObservers();
		//this.requestUnregisterPrefObserver();
		//this.unregisterComponent();
		this.requestRemovePrerequisites(data);
	},	
	requestAddPrerequisites:function(data){
		 this.addResourceProtocol(data);	
		 this.addChromeProtocol(data);	
	},
	requestRemovePrerequisites:function(data){
		 this.removeResourceProtocol(data);	
		 this.removeChromeProtocol(data);	
	},
	addResourceProtocol:function(data){
		var ios=Components.classes["@mozilla.org/network/io-service;1"].getService(Components.interfaces.nsIIOService);
		var rh=ios.getProtocolHandler("resource").QueryInterface(Components.interfaces.nsIResProtocolHandler);
		var nfu=ios.newFileURI(data.installPath);
		var isDir=data.installPath.isDirectory();
		if (isDir) {nfu=ios.newURI(nfu.spec+"/",null,null);} 
		else {nfu=ios.newURI("jar:"+nfu.spec+"!/",null,null);}
		//Note for Validator: This is safe and used to register resource protocol for our add-on, i.e. resource://tweetinsta/		
		rh.setSubstitution("tweetinsta",nfu);
	},
	removeResourceProtocol:function(data) {
		var ios=Components.classes["@mozilla.org/network/io-service;1"].getService(Components.interfaces.nsIIOService);
		var r=ios.getProtocolHandler("resource").QueryInterface(Components.interfaces.nsIResProtocolHandler);
		r.setSubstitution("tweetinsta",null);
	},	
	addChromeProtocol:function(data){
		if (Services.vc.compare(Services.appinfo.platformVersion, "10.0") < 0 && Services.vc.compare(Services.appinfo.platformVersion, "8.0") >= 0)  
			Components.manager.addBootstrappedManifestLocation(data.installPath);	
	},
	removeChromeProtocol:function(data) {
		if (Services.vc.compare(Services.appinfo.platformVersion, "10.0") < 0 && Services.vc.compare(Services.appinfo.platformVersion, "8.0") >= 0)  
			Components.manager.removeBootstrappedManifestLocation(data.installPath);
	},
	registerComponent:function(){
		if (XPCOMUtils.generateNSGetFactory)
			var NSGetFactory = XPCOMUtils.generateNSGetFactory([tweetinstaStartup]);
		var componentRegistrar = Components.manager.QueryInterface(Components.interfaces.nsIComponentRegistrar)
		var contractID = tweetinstaStartup.prototype.contractID;
		try{
			componentRegistrar.unregisterFactory(componentRegistrar.contractIDToCID(contractID), componentRegistrar.getClassObjectByContractID(contractID, Ci.nsISupports));
		}catch(e){}
		var component = tweetinstaStartup.prototype;
		var factory = NSGetFactory(component.classID)
		//Note for Validator: This is safe and used to register a generic component for our add-on.		
		componentRegistrar.registerFactory(component.classID, component.classDescription, component.contractID, factory);
	},
	unregisterComponent:function(reason){
		var componentRegistrar = Components.manager.QueryInterface(Components.interfaces.nsIComponentRegistrar);
		componentRegistrar.unregisterFactory(componentRegistrar.contractIDToCID("@tweetinsta/bootstartup;1"),componentRegistrar.getClassObjectByContractID("@tweetinsta/bootstartup;1", Components.interfaces.nsISupports));
	},	
	setDefaultPrefs:function(){
		function setDefaultPrefs(name, value){
			function setPrefs(branch, name ,value){
				if(typeof value == "string"){
					var str = Components.classes["@mozilla.org/supports-string;1"].createInstance(Components.interfaces.nsISupportsString);
					str.data = value;
					branch = branch ? branch : Services.prefs;
					branch.setComplexValue(name, Components.interfaces.nsISupportsString, str);
				}
				else if(typeof value == "number"){
					branch.setIntPref(name, value);
				}
				else if(typeof value == "boolean"){
					branch.setBoolPref(name, value);
				}
			}
			var defaultBranch = Services.prefs.getDefaultBranch(null);
			setPrefs(defaultBranch, name, value);
		}
		Services.scriptloader.loadSubScript(this.getPrefsJS(), {pref:setDefaultPrefs});	
	},
	getPrefsJS:function(){
		return "resource://tweetinsta/defaults/preferences/defaults.js";
	},
	addAddonListener:function(){
		try {  
			Components.utils.import("resource://gre/modules/AddonManager.jsm");  
			AddonManager.addAddonListener(this.AddonListener);  
		} catch (ex) {} 	
	},
	removeAddonListener:function(){
		try {  
			Components.utils.import("resource://gre/modules/AddonManager.jsm");  
			AddonManager.removeAddonListener(this.AddonListener);  
		} catch (ex) {} 
	},	
	AddonListener:{  
		onInstalling: function(addon) {  
			if (addon.id == "{d4e0dc9c-c356-438e-afbe-dca439f4399d}") {  
				var version=Components.classes["@mozilla.org/preferences-service;1"].getService(Components.interfaces.nsIPrefBranch).getCharPref("extensions.tweetinsta.currentversion");
				if(version==addon.version) Components.classes["@mozilla.org/preferences-service;1"].getService(Components.interfaces.nsIPrefBranch).setBoolPref("extensions.tweetinsta.reinstall",true);
			}  
		},  
		onUninstalling: function(addon) {  
			if (addon.id == "{d4e0dc9c-c356-438e-afbe-dca439f4399d}") {
				//foo
			}  
		},  
		onOperationCancelled: function(addon) {  
			if (addon.id == "{d4e0dc9c-c356-438e-afbe-dca439f4399d}") {
				//foo
			}  
		}  
	},
	setDefaultLocalizations:function(){
		tweetinsta.STRINGS=Components.classes["@mozilla.org/intl/stringbundle;1"].getService(Components.interfaces.nsIStringBundleService).createBundle("chrome://tweetinsta/locale/tweetinsta.properties");
	},
	removeDefaultLocalizations:function(){
		tweetinsta.STRINGS=null;
	},
    getLocaleString:function(filename, aKey, aLocale) {
		if(aLocale == null) {
			aLocale=Cc["@mozilla.org/chrome/chrome-registry;1"]
				.getService(Ci.nsIXULChromeRegistry).getSelectedLocale("global");
		}
		var addon = {
			getResourceURI: function(filePath) ({
				spec: __SCRIPT_URI_SPEC__ + "/../" + filePath
			})
		}
		function filepath(locale) addon.getResourceURI("chrome/locale/" + locale + "/" + filename).spec;
		function getStr(aStrBundle, aKey) {
			if (!aStrBundle) return false;
			try {
				return aStrBundle.GetStringFromName(aKey);
			} catch (e) {}
			return "";
		}
		let splitter = /(\w+)-\w+/;
		let locale = Cc["@mozilla.org/chrome/chrome-registry;1"].getService(Ci.nsIXULChromeRegistry).getSelectedLocale("global");
		let defaultBundle = Services.strings.createBundle(filepath(locale));
		let localeBundle, localeBasicBundle;
		let defaultLocale = "en";
		let defaultBasicBundle;		
		let locale_tweetinsta = locale.match(splitter);
		if (locale_tweetinsta) {
			defaultBasicBundle = Services.strings.createBundle(filepath(locale_tweetinsta[1]));
		}		
		let addonsDefaultBundle = Services.strings.createBundle(filepath(defaultLocale));	
		if (aLocale) {
			localeBundle = Services.strings.createBundle(filepath(aLocale));
			let locale_tweetinsta = aLocale.match(splitter)
			if (locale_tweetinsta) localeBasicBundle = Services.strings.createBundle(filepath(locale_tweetinsta[1]));
		}
		return getStr(localeBundle, aKey)
			|| getStr(localeBasicBundle, aKey)
			|| getStr(defaultBundle, aKey)
			|| getStr(defaultBasicBundle, aKey)
			|| getStr(addonsDefaultBundle, aKey);
    },	
	setupBrowserUI:function(){
		let wm = Cc["@mozilla.org/appshell/window-mediator;1"].
			   getService(Ci.nsIWindowMediator);
		// Get the list of browser windows already open
		let windows = wm.getEnumerator("navigator:browser");
		while (windows.hasMoreElements()) {
			let domWindow = windows.getNext().QueryInterface(Ci.nsIDOMWindow);
			WindowListener.setupBrowserUI(domWindow,false);
		}
	},
	tearBrowserUI:function(){
		let wm = Cc["@mozilla.org/appshell/window-mediator;1"].
			   getService(Ci.nsIWindowMediator);
		// Get the list of browser windows already open
		let windows = wm.getEnumerator("navigator:browser");
		while (windows.hasMoreElements()) {
			let domWindow = windows.getNext().QueryInterface(Ci.nsIDOMWindow);
			WindowListener.tearDownBrowserUI(domWindow);
		}
	},
	addWindowListener:function(){
		let wm = Cc["@mozilla.org/appshell/window-mediator;1"].
			   getService(Ci.nsIWindowMediator);
		// Wait for any new browser windows to open
		wm.addListener(WindowListener);
	},
	removeWindowListener:function(){
		let wm = Cc["@mozilla.org/appshell/window-mediator;1"].
			   getService(Ci.nsIWindowMediator);
		// Stop listening for any new browser windows to open	   
		wm.removeListener(WindowListener);	
	},
	registerStyle:function(url){
		var sss = Components.classes["@mozilla.org/content/style-sheet-service;1"]
							.getService(Components.interfaces.nsIStyleSheetService);
		var ios = Components.classes["@mozilla.org/network/io-service;1"]
							.getService(Components.interfaces.nsIIOService);
		var uri = ios.newURI(url, null, null);
		if(!sss.sheetRegistered(uri, sss.USER_SHEET))
			//Note for Validator: This is safe and used to register our add-on skin, i.e. chrome://tweetinsta/skin/tweetinsta.css			
			sss.loadAndRegisterSheet(uri, sss.USER_SHEET);	
	},
	unregisterStyle:function(url){
		var sss = Components.classes["@mozilla.org/content/style-sheet-service;1"]
							.getService(Components.interfaces.nsIStyleSheetService);
		var ios = Components.classes["@mozilla.org/network/io-service;1"]
							.getService(Components.interfaces.nsIIOService);
		var u = ios.newURI(url, null, null);
		if(sss.sheetRegistered(u, sss.USER_SHEET))
		  sss.unregisterSheet(u, sss.USER_SHEET); 	
	},	
	addAddonSkinCSS:function(){
		this.registerStyle(this.getOverlayCSS());
	},
	removeAddonSkinCSS:function(){
		this.unregisterStyle(this.getOverlayCSS());
	},
	getOverlayCSS:function(){
		return "chrome://tweetinsta/skin/tweetinsta.css";
	},	
	requestAddFullPageCSS:function(){
		if(this.prefsinstance.getCharPref("extensions.tweetinsta.currentvideosize")=="fullpage") this.addFullPageCSS();	
	},
	addFullPageCSS:function(){
		this.registerStyle(this.getFullPageCSS());			
	},
	removeFullPageCSS:function(){
		this.unregisterStyle(this.getFullPageCSS()); 	  
	},
	getFullPageCSS:function(){
		return "chrome://tweetinsta/content/style.css";
	},	
	requestRegisterObservers:function(){
		if(this.prefsinstance.getBoolPref("extensions.tweetinsta.enableembeddedvideo")) {
			var c=Components.classes["@tweetinsta/bootstartup;1"].getService().wrappedJSObject;
			c.registerObservers();
		}	
	},
	requestUnregisterObservers:function(){
		if(this.prefsinstance.getBoolPref("extensions.tweetinsta.enableembeddedvideo")) {
			var c=Components.classes["@tweetinsta/bootstartup;1"].getService().wrappedJSObject;
			c.unregisterObservers();
		}	
	},
	requestRegisterPrefObserver:function(){
		var c=Components.classes["@tweetinsta/bootstartup;1"].getService().wrappedJSObject;
		c.registerPrefObserver();
	},
	requestUnregisterPrefObserver:function(){
		var c=Components.classes["@tweetinsta/bootstartup;1"].getService().wrappedJSObject;
		c.unregisterPrefObserver();
	},
	lg:function(e,m){
		switch(m) {
			case 0:
				var console = (Components.utils.import("resource://gre/modules/devtools/Console.jsm", {})).console;
				console.log(e);			
			break;
			case 1:
				var prompts = Components.classes["@mozilla.org/embedcomp/prompt-service;1"]
				.getService(Components.interfaces.nsIPromptService);
				prompts.alert(null, "YouTube High Definition", e + ((e.lineNumber) ? ("\n" + e.lineNumber) : ""));			
			break;
			case 2:
				Components.utils.reportError(e + ((e.lineNumber) ? ("\n" + e.lineNumber) : ""));
			break;
			default:
			//throw Components.utils.reportError("Unknown topic: "+e);
		}
	}
}

function install(data) {
}

function uninstall(data,reason){
	if(reason!=ADDON_UNINSTALL) return;
	Components.classes["@mozilla.org/preferences-service;1"].getService(Components.interfaces.nsIPrefService).getBranch("extensions.tweetinsta.").deleteBranch("");
}

function startup(data, reason) {
	try{
		tweetinstaBootstrapAddon.startup(data,reason);
	} catch(e){
		tweetinstaBootstrapAddon.lg(e,1);
	}
}

function shutdown(data, reason) {
	try{
		tweetinstaBootstrapAddon.shutdown(data,reason);
	} catch(e){
		tweetinstaBootstrapAddon.lg(e,1);
	}
}
